/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.BookOrderRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for BookOrderPersistence
 * 
 * @author Telosys Tools
 *
 */
public class BookOrderPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(BookOrderPersistenceGenericTest.class.getName());

	public void testPersistenceService(BookOrderPersistence persistenceService) throws Exception {
    	LOGGER.info("test BookOrderPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	BookOrderRecord bookOrder = new BookOrderRecord();
		//--- Key values
		bookOrder.setId(Integer.valueOf(100)); // "ID" : java.lang.Integer
		//--- Other values
		bookOrder.setShopCode("AAA"); // "SHOP_CODE" : java.lang.String
		bookOrder.setCustomerCode("AAAAA"); // "CUSTOMER_CODE" : java.lang.String
		bookOrder.setEmployeeCode("AAAA"); // "EMPLOYEE_CODE" : java.lang.String
		bookOrder.setDate(java.sql.Date.valueOf("2001-06-22")); // "DATE" : java.util.Date
		bookOrder.setState(Integer.valueOf(100)); // "STATE" : java.lang.Integer

    	//--- INSERT
    	LOGGER.info("Insert : " + bookOrder);
    	persistenceService.create(bookOrder);
    	assertTrue( persistenceService.exists(Integer.valueOf(100)) );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(bookOrder) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	BookOrderRecord bookOrder2 = persistenceService.findById(Integer.valueOf(100));
    	assertNotNull(bookOrder2);
		assertTrue( bookOrder2.getId().equals(Integer.valueOf(100)) ) ;
    	assertTrue( persistenceService.exists(bookOrder2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		bookOrder2.setShopCode("BBB"); // "SHOP_CODE" : java.lang.String
		bookOrder2.setCustomerCode("BBBBB"); // "CUSTOMER_CODE" : java.lang.String
		bookOrder2.setEmployeeCode("BBBB"); // "EMPLOYEE_CODE" : java.lang.String
		bookOrder2.setDate(java.sql.Date.valueOf("2002-06-22")); // "DATE" : java.util.Date
		bookOrder2.setState(Integer.valueOf(200)); // "STATE" : java.lang.Integer
    	LOGGER.info("Update : " + bookOrder2 );
    	assertTrue( persistenceService.update(bookOrder2) );
    	
    	//--- LOAD
    	BookOrderRecord bookOrder3 = new BookOrderRecord();
    	bookOrder3.setId(Integer.valueOf(100));
		bookOrder3 = persistenceService.load(bookOrder3);
    	assertNotNull( persistenceService.load(bookOrder3) );
    	LOGGER.info("Loaded : " + bookOrder3 );
	assertEquals(bookOrder2.getShopCode(), bookOrder3.getShopCode() ); 
	assertEquals(bookOrder2.getCustomerCode(), bookOrder3.getCustomerCode() ); 
	assertEquals(bookOrder2.getEmployeeCode(), bookOrder3.getEmployeeCode() ); 
		assertEquals(bookOrder2.getDate().getTime(), bookOrder3.getDate().getTime() ); 
	assertEquals(bookOrder2.getState(), bookOrder3.getState() ); 


    	bookOrder3.setId(Integer.valueOf(300));
    	assertNull( persistenceService.load(bookOrder3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + bookOrder2 );
    	assertTrue( persistenceService.delete(bookOrder2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(bookOrder2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(Integer.valueOf(100)) ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists(Integer.valueOf(100)) ) ;
    	assertFalse( persistenceService.exists(bookOrder2) ) ;
    	bookOrder2 = persistenceService.findById(Integer.valueOf(100));
    	assertNull( bookOrder2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
