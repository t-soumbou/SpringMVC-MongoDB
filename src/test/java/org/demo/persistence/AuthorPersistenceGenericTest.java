/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.AuthorRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for AuthorPersistence
 * 
 * @author Telosys Tools
 *
 */
public class AuthorPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(AuthorPersistenceGenericTest.class.getName());

	public void testPersistenceService(AuthorPersistence persistenceService) throws Exception {
    	LOGGER.info("test AuthorPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	AuthorRecord author = new AuthorRecord();
		//--- Key values
		author.setId(Integer.valueOf(100)); // "ID" : java.lang.Integer
		//--- Other values
		author.setFirstName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "FIRST_NAME" : java.lang.String
		author.setLastName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "LAST_NAME" : java.lang.String

    	//--- INSERT
    	LOGGER.info("Insert : " + author);
    	persistenceService.create(author);
    	assertTrue( persistenceService.exists(Integer.valueOf(100)) );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(author) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	AuthorRecord author2 = persistenceService.findById(Integer.valueOf(100));
    	assertNotNull(author2);
		assertTrue( author2.getId().equals(Integer.valueOf(100)) ) ;
    	assertTrue( persistenceService.exists(author2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		author2.setFirstName("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "FIRST_NAME" : java.lang.String
		author2.setLastName("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "LAST_NAME" : java.lang.String
    	LOGGER.info("Update : " + author2 );
    	assertTrue( persistenceService.update(author2) );
    	
    	//--- LOAD
    	AuthorRecord author3 = new AuthorRecord();
    	author3.setId(Integer.valueOf(100));
		author3 = persistenceService.load(author3);
    	assertNotNull( persistenceService.load(author3) );
    	LOGGER.info("Loaded : " + author3 );
	assertEquals(author2.getFirstName(), author3.getFirstName() ); 
	assertEquals(author2.getLastName(), author3.getLastName() ); 


    	author3.setId(Integer.valueOf(300));
    	assertNull( persistenceService.load(author3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + author2 );
    	assertTrue( persistenceService.delete(author2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(author2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(Integer.valueOf(100)) ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists(Integer.valueOf(100)) ) ;
    	assertFalse( persistenceService.exists(author2) ) ;
    	author2 = persistenceService.findById(Integer.valueOf(100));
    	assertNull( author2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
