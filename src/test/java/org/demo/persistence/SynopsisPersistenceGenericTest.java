/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.SynopsisRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for SynopsisPersistence
 * 
 * @author Telosys Tools
 *
 */
public class SynopsisPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(SynopsisPersistenceGenericTest.class.getName());

	public void testPersistenceService(SynopsisPersistence persistenceService) throws Exception {
    	LOGGER.info("test SynopsisPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	SynopsisRecord synopsis = new SynopsisRecord();
		//--- Key values
		synopsis.setBookId(Integer.valueOf(100)); // "BOOK_ID" : java.lang.Integer
		//--- Other values
		synopsis.setSynopsis("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "SYNOPSIS" : java.lang.String

    	//--- INSERT
    	LOGGER.info("Insert : " + synopsis);
    	persistenceService.create(synopsis);
    	assertTrue( persistenceService.exists(Integer.valueOf(100)) );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(synopsis) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	SynopsisRecord synopsis2 = persistenceService.findById(Integer.valueOf(100));
    	assertNotNull(synopsis2);
		assertTrue( synopsis2.getBookId().equals(Integer.valueOf(100)) ) ;
    	assertTrue( persistenceService.exists(synopsis2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		synopsis2.setSynopsis("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "SYNOPSIS" : java.lang.String
    	LOGGER.info("Update : " + synopsis2 );
    	assertTrue( persistenceService.update(synopsis2) );
    	
    	//--- LOAD
    	SynopsisRecord synopsis3 = new SynopsisRecord();
    	synopsis3.setBookId(Integer.valueOf(100));
		synopsis3 = persistenceService.load(synopsis3);
    	assertNotNull( persistenceService.load(synopsis3) );
    	LOGGER.info("Loaded : " + synopsis3 );
	assertEquals(synopsis2.getSynopsis(), synopsis3.getSynopsis() ); 


    	synopsis3.setBookId(Integer.valueOf(300));
    	assertNull( persistenceService.load(synopsis3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + synopsis2 );
    	assertTrue( persistenceService.delete(synopsis2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(synopsis2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(Integer.valueOf(100)) ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists(Integer.valueOf(100)) ) ;
    	assertFalse( persistenceService.exists(synopsis2) ) ;
    	synopsis2 = persistenceService.findById(Integer.valueOf(100));
    	assertNull( synopsis2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
