/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.BookRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for BookPersistence
 * 
 * @author Telosys Tools
 *
 */
public class BookPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(BookPersistenceGenericTest.class.getName());

	public void testPersistenceService(BookPersistence persistenceService) throws Exception {
    	LOGGER.info("test BookPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	BookRecord book = new BookRecord();
		//--- Key values
		book.setId(Integer.valueOf(100)); // "ID" : java.lang.Integer
		//--- Other values
		book.setPublisherId(Integer.valueOf(100)); // "PUBLISHER_ID" : java.lang.Integer
		book.setAuthorId(Integer.valueOf(100)); // "AUTHOR_ID" : java.lang.Integer
		book.setIsbn("AAAAAAAAAAAAA"); // "ISBN" : java.lang.String
		book.setTitle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "TITLE" : java.lang.String
		book.setPrice(java.math.BigDecimal.valueOf(10000)); // "PRICE" : java.math.BigDecimal
		book.setQuantity(Integer.valueOf(100)); // "QUANTITY" : java.lang.Integer
		book.setDiscount(Integer.valueOf(100)); // "DISCOUNT" : java.lang.Integer
		book.setAvailability(Short.valueOf((short)1)); // "AVAILABILITY" : java.lang.Short
		book.setBestSeller(Short.valueOf((short)1)); // "BEST_SELLER" : java.lang.Short

    	//--- INSERT
    	LOGGER.info("Insert : " + book);
    	persistenceService.create(book);
    	assertTrue( persistenceService.exists(Integer.valueOf(100)) );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(book) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	BookRecord book2 = persistenceService.findById(Integer.valueOf(100));
    	assertNotNull(book2);
		assertTrue( book2.getId().equals(Integer.valueOf(100)) ) ;
    	assertTrue( persistenceService.exists(book2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		book2.setPublisherId(Integer.valueOf(200)); // "PUBLISHER_ID" : java.lang.Integer
		book2.setAuthorId(Integer.valueOf(200)); // "AUTHOR_ID" : java.lang.Integer
		book2.setIsbn("BBBBBBBBBBBBB"); // "ISBN" : java.lang.String
		book2.setTitle("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "TITLE" : java.lang.String
		book2.setPrice(java.math.BigDecimal.valueOf(20000)); // "PRICE" : java.math.BigDecimal
		book2.setQuantity(Integer.valueOf(200)); // "QUANTITY" : java.lang.Integer
		book2.setDiscount(Integer.valueOf(200)); // "DISCOUNT" : java.lang.Integer
		book2.setAvailability(Short.valueOf((short)2)); // "AVAILABILITY" : java.lang.Short
		book2.setBestSeller(Short.valueOf((short)2)); // "BEST_SELLER" : java.lang.Short
    	LOGGER.info("Update : " + book2 );
    	assertTrue( persistenceService.update(book2) );
    	
    	//--- LOAD
    	BookRecord book3 = new BookRecord();
    	book3.setId(Integer.valueOf(100));
		book3 = persistenceService.load(book3);
    	assertNotNull( persistenceService.load(book3) );
    	LOGGER.info("Loaded : " + book3 );
	assertEquals(book2.getPublisherId(), book3.getPublisherId() ); 
	assertEquals(book2.getAuthorId(), book3.getAuthorId() ); 
	assertEquals(book2.getIsbn(), book3.getIsbn() ); 
	assertEquals(book2.getTitle(), book3.getTitle() ); 
	assertEquals(book2.getPrice(), book3.getPrice() ); 
	assertEquals(book2.getQuantity(), book3.getQuantity() ); 
	assertEquals(book2.getDiscount(), book3.getDiscount() ); 
	assertEquals(book2.getAvailability(), book3.getAvailability() ); 
	assertEquals(book2.getBestSeller(), book3.getBestSeller() ); 


    	book3.setId(Integer.valueOf(300));
    	assertNull( persistenceService.load(book3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + book2 );
    	assertTrue( persistenceService.delete(book2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(book2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById(Integer.valueOf(100)) ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists(Integer.valueOf(100)) ) ;
    	assertFalse( persistenceService.exists(book2) ) ;
    	book2 = persistenceService.findById(Integer.valueOf(100));
    	assertNull( book2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
