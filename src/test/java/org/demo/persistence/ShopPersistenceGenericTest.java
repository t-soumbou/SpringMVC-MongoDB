/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.ShopRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for ShopPersistence
 * 
 * @author Telosys Tools
 *
 */
public class ShopPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(ShopPersistenceGenericTest.class.getName());

	public void testPersistenceService(ShopPersistence persistenceService) throws Exception {
    	LOGGER.info("test ShopPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	ShopRecord shop = new ShopRecord();
		//--- Key values
		shop.setCode("AAA"); // "CODE" : java.lang.String
		//--- Other values
		shop.setName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "NAME" : java.lang.String
		shop.setAddress1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "ADDRESS_1" : java.lang.String
		shop.setAddress2("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "ADDRESS_2" : java.lang.String
		shop.setZipCode(Integer.valueOf(100)); // "ZIP_CODE" : java.lang.Integer
		shop.setCity("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "CITY" : java.lang.String
		shop.setCountryCode("AA"); // "COUNTRY_CODE" : java.lang.String
		shop.setPhone("AAAAAAAAAAAAAA"); // "PHONE" : java.lang.String
		shop.setEmail("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "EMAIL" : java.lang.String
		shop.setExecutive("AAAA"); // "EXECUTIVE" : java.lang.String

    	//--- INSERT
    	LOGGER.info("Insert : " + shop);
    	persistenceService.create(shop);
    	assertTrue( persistenceService.exists("AAA") );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(shop) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	ShopRecord shop2 = persistenceService.findById("AAA");
    	assertNotNull(shop2);
		assertTrue( shop2.getCode().equals("AAA") ) ;
    	assertTrue( persistenceService.exists(shop2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		shop2.setName("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "NAME" : java.lang.String
		shop2.setAddress1("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "ADDRESS_1" : java.lang.String
		shop2.setAddress2("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "ADDRESS_2" : java.lang.String
		shop2.setZipCode(Integer.valueOf(200)); // "ZIP_CODE" : java.lang.Integer
		shop2.setCity("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "CITY" : java.lang.String
		shop2.setCountryCode("BB"); // "COUNTRY_CODE" : java.lang.String
		shop2.setPhone("BBBBBBBBBBBBBB"); // "PHONE" : java.lang.String
		shop2.setEmail("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "EMAIL" : java.lang.String
		shop2.setExecutive("BBBB"); // "EXECUTIVE" : java.lang.String
    	LOGGER.info("Update : " + shop2 );
    	assertTrue( persistenceService.update(shop2) );
    	
    	//--- LOAD
    	ShopRecord shop3 = new ShopRecord();
    	shop3.setCode("AAA");
		shop3 = persistenceService.load(shop3);
    	assertNotNull( persistenceService.load(shop3) );
    	LOGGER.info("Loaded : " + shop3 );
	assertEquals(shop2.getName(), shop3.getName() ); 
	assertEquals(shop2.getAddress1(), shop3.getAddress1() ); 
	assertEquals(shop2.getAddress2(), shop3.getAddress2() ); 
	assertEquals(shop2.getZipCode(), shop3.getZipCode() ); 
	assertEquals(shop2.getCity(), shop3.getCity() ); 
	assertEquals(shop2.getCountryCode(), shop3.getCountryCode() ); 
	assertEquals(shop2.getPhone(), shop3.getPhone() ); 
	assertEquals(shop2.getEmail(), shop3.getEmail() ); 
	assertEquals(shop2.getExecutive(), shop3.getExecutive() ); 


    	shop3.setCode("CCC");
    	assertNull( persistenceService.load(shop3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + shop2 );
    	assertTrue( persistenceService.delete(shop2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(shop2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById("AAA") ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists("AAA") ) ;
    	assertFalse( persistenceService.exists(shop2) ) ;
    	shop2 = persistenceService.findById("AAA");
    	assertNull( shop2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
