/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.CustomerRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for CustomerPersistence
 * 
 * @author Telosys Tools
 *
 */
public class CustomerPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(CustomerPersistenceGenericTest.class.getName());

	public void testPersistenceService(CustomerPersistence persistenceService) throws Exception {
    	LOGGER.info("test CustomerPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	CustomerRecord customer = new CustomerRecord();
		//--- Key values
		customer.setCode("AAAAA"); // "CODE" : java.lang.String
		//--- Other values
		customer.setCountryCode("AA"); // "COUNTRY_CODE" : java.lang.String
		customer.setFirstName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "FIRST_NAME" : java.lang.String
		customer.setLastName("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "LAST_NAME" : java.lang.String
		customer.setLogin("AAAAAAAAAAAAAAAAAAAA"); // "LOGIN" : java.lang.String
		customer.setPassword("AAAAAAAAAAAAAAAAAAAA"); // "PASSWORD" : java.lang.String
		customer.setAge(Integer.valueOf(100)); // "AGE" : java.lang.Integer
		customer.setCity("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "CITY" : java.lang.String
		customer.setZipCode(Integer.valueOf(100)); // "ZIP_CODE" : java.lang.Integer
		customer.setPhone("AAAAAAAAAAAAAAAAAAAA"); // "PHONE" : java.lang.String
		customer.setReviewer(Short.valueOf((short)1)); // "REVIEWER" : java.lang.Short

    	//--- INSERT
    	LOGGER.info("Insert : " + customer);
    	persistenceService.create(customer);
    	assertTrue( persistenceService.exists("AAAAA") );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(customer) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	CustomerRecord customer2 = persistenceService.findById("AAAAA");
    	assertNotNull(customer2);
		assertTrue( customer2.getCode().equals("AAAAA") ) ;
    	assertTrue( persistenceService.exists(customer2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		customer2.setCountryCode("BB"); // "COUNTRY_CODE" : java.lang.String
		customer2.setFirstName("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "FIRST_NAME" : java.lang.String
		customer2.setLastName("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "LAST_NAME" : java.lang.String
		customer2.setLogin("BBBBBBBBBBBBBBBBBBBB"); // "LOGIN" : java.lang.String
		customer2.setPassword("BBBBBBBBBBBBBBBBBBBB"); // "PASSWORD" : java.lang.String
		customer2.setAge(Integer.valueOf(200)); // "AGE" : java.lang.Integer
		customer2.setCity("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "CITY" : java.lang.String
		customer2.setZipCode(Integer.valueOf(200)); // "ZIP_CODE" : java.lang.Integer
		customer2.setPhone("BBBBBBBBBBBBBBBBBBBB"); // "PHONE" : java.lang.String
		customer2.setReviewer(Short.valueOf((short)2)); // "REVIEWER" : java.lang.Short
    	LOGGER.info("Update : " + customer2 );
    	assertTrue( persistenceService.update(customer2) );
    	
    	//--- LOAD
    	CustomerRecord customer3 = new CustomerRecord();
    	customer3.setCode("AAAAA");
		customer3 = persistenceService.load(customer3);
    	assertNotNull( persistenceService.load(customer3) );
    	LOGGER.info("Loaded : " + customer3 );
	assertEquals(customer2.getCountryCode(), customer3.getCountryCode() ); 
	assertEquals(customer2.getFirstName(), customer3.getFirstName() ); 
	assertEquals(customer2.getLastName(), customer3.getLastName() ); 
	assertEquals(customer2.getLogin(), customer3.getLogin() ); 
	assertEquals(customer2.getPassword(), customer3.getPassword() ); 
	assertEquals(customer2.getAge(), customer3.getAge() ); 
	assertEquals(customer2.getCity(), customer3.getCity() ); 
	assertEquals(customer2.getZipCode(), customer3.getZipCode() ); 
	assertEquals(customer2.getPhone(), customer3.getPhone() ); 
	assertEquals(customer2.getReviewer(), customer3.getReviewer() ); 


    	customer3.setCode("CCCCC");
    	assertNull( persistenceService.load(customer3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + customer2 );
    	assertTrue( persistenceService.delete(customer2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(customer2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById("AAAAA") ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists("AAAAA") ) ;
    	assertFalse( persistenceService.exists(customer2) ) ;
    	customer2 = persistenceService.findById("AAAAA");
    	assertNull( customer2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
