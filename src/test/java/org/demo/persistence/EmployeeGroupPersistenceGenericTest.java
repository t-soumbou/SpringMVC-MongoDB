/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.EmployeeGroupRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for EmployeeGroupPersistence
 * 
 * @author Telosys Tools
 *
 */
public class EmployeeGroupPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(EmployeeGroupPersistenceGenericTest.class.getName());

	public void testPersistenceService(EmployeeGroupPersistence persistenceService) throws Exception {
    	LOGGER.info("test EmployeeGroupPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	EmployeeGroupRecord employeeGroup = new EmployeeGroupRecord();
		//--- Key values
		employeeGroup.setEmployeeCode("AAAA"); // "EMPLOYEE_CODE" : java.lang.String
		employeeGroup.setGroupId(Short.valueOf((short)1)); // "GROUP_ID" : java.lang.Short
		//--- Other values

    	//--- INSERT
    	LOGGER.info("Insert : " + employeeGroup);
    	persistenceService.create(employeeGroup);
    	assertTrue( persistenceService.exists("AAAA", Short.valueOf((short)1)) );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(employeeGroup) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	EmployeeGroupRecord employeeGroup2 = persistenceService.findById("AAAA", Short.valueOf((short)1));
    	assertNotNull(employeeGroup2);
		assertTrue( employeeGroup2.getEmployeeCode().equals("AAAA") ) ;
		assertTrue( employeeGroup2.getGroupId().equals(Short.valueOf((short)1)) ) ;
    	assertTrue( persistenceService.exists(employeeGroup2) ) ;
    	
    	//--- NO UPDATE FOR THIS ENTITY (ALL COLUMNS IN PRIMARY KEY)
    	
    	//--- LOAD
    	EmployeeGroupRecord employeeGroup3 = new EmployeeGroupRecord();
    	employeeGroup3.setEmployeeCode("AAAA");
    	employeeGroup3.setGroupId(Short.valueOf((short)1));
		employeeGroup3 = persistenceService.load(employeeGroup3);
    	assertNotNull( persistenceService.load(employeeGroup3) );
    	LOGGER.info("Loaded : " + employeeGroup3 );


    	employeeGroup3.setEmployeeCode("CCCC");
    	employeeGroup3.setGroupId(Short.valueOf((short)3));
    	assertNull( persistenceService.load(employeeGroup3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + employeeGroup2 );
    	assertTrue( persistenceService.delete(employeeGroup2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(employeeGroup2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById("AAAA", Short.valueOf((short)1)) ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists("AAAA", Short.valueOf((short)1)) ) ;
    	assertFalse( persistenceService.exists(employeeGroup2) ) ;
    	employeeGroup2 = persistenceService.findById("AAAA", Short.valueOf((short)1));
    	assertNull( employeeGroup2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
