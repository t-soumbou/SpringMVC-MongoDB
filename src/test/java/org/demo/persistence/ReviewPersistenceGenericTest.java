/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence;


import org.demo.data.record.ReviewRecord ;
import static org.junit.Assert.*;
import java.util.logging.*;

/**
 * JUnit tests for ReviewPersistence
 * 
 * @author Telosys Tools
 *
 */
public class ReviewPersistenceGenericTest {
	private static final Logger LOGGER = Logger.getLogger(ReviewPersistenceGenericTest.class.getName());

	public void testPersistenceService(ReviewPersistence persistenceService) throws Exception {
    	LOGGER.info("test ReviewPersistence ");


    	assertTrue( persistenceService.countAll() == 0 );

    	ReviewRecord review = new ReviewRecord();
		//--- Key values
		review.setCustomerCode("AAAAA"); // "CUSTOMER_CODE" : java.lang.String
		review.setBookId(Integer.valueOf(100)); // "BOOK_ID" : java.lang.Integer
		//--- Other values
		review.setReviewText("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "REVIEW_TEXT" : java.lang.String
		review.setReviewNote(Integer.valueOf(100)); // "REVIEW_NOTE" : java.lang.Integer
		review.setCreation(java.sql.Timestamp.valueOf("2001-05-21 01:46:52")); // "CREATION" : java.util.Date
		review.setLastUpdate(java.sql.Timestamp.valueOf("2001-05-21 01:46:52")); // "LAST_UPDATE" : java.util.Date

    	//--- INSERT
    	LOGGER.info("Insert : " + review);
    	persistenceService.create(review);
    	assertTrue( persistenceService.exists("AAAAA", Integer.valueOf(100)) );
    	assertTrue( persistenceService.countAll() == 1 );
    	assertTrue( persistenceService.exists(review) );
    	
    	//--- FIND
    	LOGGER.info("Find..." );
    	ReviewRecord review2 = persistenceService.findById("AAAAA", Integer.valueOf(100));
    	assertNotNull(review2);
		assertTrue( review2.getCustomerCode().equals("AAAAA") ) ;
		assertTrue( review2.getBookId().equals(Integer.valueOf(100)) ) ;
    	assertTrue( persistenceService.exists(review2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		review2.setReviewText("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "REVIEW_TEXT" : java.lang.String
		review2.setReviewNote(Integer.valueOf(200)); // "REVIEW_NOTE" : java.lang.Integer
		review2.setCreation(java.sql.Timestamp.valueOf("2002-05-21 02:46:52")); // "CREATION" : java.util.Date
		review2.setLastUpdate(java.sql.Timestamp.valueOf("2002-05-21 02:46:52")); // "LAST_UPDATE" : java.util.Date
    	LOGGER.info("Update : " + review2 );
    	assertTrue( persistenceService.update(review2) );
    	
    	//--- LOAD
    	ReviewRecord review3 = new ReviewRecord();
    	review3.setCustomerCode("AAAAA");
    	review3.setBookId(Integer.valueOf(100));
		review3 = persistenceService.load(review3);
    	assertNotNull( persistenceService.load(review3) );
    	LOGGER.info("Loaded : " + review3 );
	assertEquals(review2.getReviewText(), review3.getReviewText() ); 
	assertEquals(review2.getReviewNote(), review3.getReviewNote() ); 
		assertEquals(review2.getCreation().getTime(), review3.getCreation().getTime() ); 
		assertEquals(review2.getLastUpdate().getTime(), review3.getLastUpdate().getTime() ); 


    	review3.setCustomerCode("CCCCC");
    	review3.setBookId(Integer.valueOf(300));
    	assertNull( persistenceService.load(review3) );
    	
    	//--- DELETE
    	LOGGER.info("Delete : " + review2 );
    	assertTrue( persistenceService.delete(review2) ); // Delete #1 : OK
    	assertFalse( persistenceService.delete(review2) ); // Nothing (already deleted)
    	assertFalse( persistenceService.deleteById("AAAAA", Integer.valueOf(100)) ); // Nothing (already deleted)

    	assertTrue( persistenceService.countAll() == 0 );
    	assertFalse( persistenceService.exists("AAAAA", Integer.valueOf(100)) ) ;
    	assertFalse( persistenceService.exists(review2) ) ;
    	review2 = persistenceService.findById("AAAAA", Integer.valueOf(100));
    	assertNull( review2 );
    	
    	LOGGER.info("Normal end of persistence service test." );
	}

}
