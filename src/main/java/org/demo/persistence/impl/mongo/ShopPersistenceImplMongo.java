/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.mongo;

import java.util.List;
import javax.inject.Named;
import org.bson.conversions.Bson;
import org.demo.persistence.impl.mongo.commons.GenericMongoDAO;
import org.bson.Document;
import org.demo.persistence.impl.mongo.commons.DocumentWrapper;



import org.demo.data.record.ShopRecord;
import org.demo.persistence.ShopPersistence;

@Named("ShopPersistence")
public class ShopPersistenceImplMongo extends GenericMongoDAO<ShopRecord> implements ShopPersistence {

	/**
	 * DAO constructor
	 */
	public ShopPersistenceImplMongo() {
		super("shop");
	}

	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private ShopRecord newInstanceWithPrimaryKey(String code) {
		ShopRecord shop = new ShopRecord ();
        shop.setCode(code); 
		return shop;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ShopRecord findById(String code){
        ShopRecord  shop = newInstanceWithPrimaryKey(code);
		return super.doSelect(shop);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<ShopRecord> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public ShopRecord load(ShopRecord shop) {
		 return super.doSelect(shop);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public   void   insert(ShopRecord shop){
		 super.doInsert(shop);
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public void save(ShopRecord shop){
		if (super.doExists(shop)) {
			super.doUpdate(shop);
		} else {
			insert(shop);
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(ShopRecord shop){
		long result= super.doUpdate(shop);	
		return result > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
public 	ShopRecord   create(ShopRecord shop){
		insert(shop);
        return shop;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById(String code) {
		ShopRecord shop = newInstanceWithPrimaryKey(code);
		long r = super.doDelete(shop);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(ShopRecord shop) {
		long r = super.doDelete(shop);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 * @return
	 */
	public boolean exists(String code) {
		ShopRecord shop = newInstanceWithPrimaryKey(code);
		return super.doExists(shop);
	}

	/**
	 * Checks the existence of the given bean in the database
	 * @return
	 */
	public boolean exists(ShopRecord shop) {
		return super.doExists(shop);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected ShopRecord docTobean(Document doc) {
		ShopRecord shop = new ShopRecord ();
		DocumentWrapper mongoDoc = new DocumentWrapper(doc);
		//--- Set data from document to Bean attributes
		shop.setCode(mongoDoc.getString("code"));
		shop.setName(mongoDoc.getString("name"));
		shop.setAddress1(mongoDoc.getString("address1"));
		shop.setAddress2(mongoDoc.getString("address2"));
		shop.setZipCode(mongoDoc.getInteger("zipCode"));
		shop.setCity(mongoDoc.getString("city"));
		shop.setCountryCode(mongoDoc.getString("countryCode"));
		shop.setPhone(mongoDoc.getString("phone"));
		shop.setEmail(mongoDoc.getString("email"));
		shop.setExecutive(mongoDoc.getString("executive"));
		return shop ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected DocumentWrapper beanToDoc(ShopRecord  bean) {
		//--- Set data from bean to Document attributes
		DocumentWrapper doc = new DocumentWrapper();	
		doc.append("code", bean.getCode());
		doc.append("name", bean.getName());
		doc.append("address1", bean.getAddress1());
		doc.append("address2", bean.getAddress2());
		doc.append("zipCode", bean.getZipCode());
		doc.append("city", bean.getCity());
		doc.append("countryCode", bean.getCountryCode());
		doc.append("phone", bean.getPhone());
		doc.append("email", bean.getEmail());
		doc.append("executive", bean.getExecutive());
		return doc; 
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected void setAutoIncrementedKey(ShopRecord  bean, long id) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected Bson bsonForIdentifyBean(ShopRecord  bean) {
		DocumentWrapper mongoDoc = new DocumentWrapper();
		mongoDoc.append("code", bean.getCode());
		return	mongoDoc.getDocument();
	}

}
