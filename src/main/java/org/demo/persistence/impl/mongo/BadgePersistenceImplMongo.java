/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.mongo;

import java.util.List;
import javax.inject.Named;
import org.bson.conversions.Bson;
import org.demo.persistence.impl.mongo.commons.GenericMongoDAO;
import org.bson.Document;
import org.demo.persistence.impl.mongo.commons.DocumentWrapper;



import org.demo.data.record.BadgeRecord;
import org.demo.persistence.BadgePersistence;

@Named("BadgePersistence")
public class BadgePersistenceImplMongo extends GenericMongoDAO<BadgeRecord> implements BadgePersistence {

	/**
	 * DAO constructor
	 */
	public BadgePersistenceImplMongo() {
		super("badge");
	}

	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private BadgeRecord newInstanceWithPrimaryKey(Integer badgeNumber) {
		BadgeRecord badge = new BadgeRecord ();
        badge.setBadgeNumber(badgeNumber); 
		return badge;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public BadgeRecord findById(Integer badgeNumber){
        BadgeRecord  badge = newInstanceWithPrimaryKey(badgeNumber);
		return super.doSelect(badge);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<BadgeRecord> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public BadgeRecord load(BadgeRecord badge) {
		 return super.doSelect(badge);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public   void   insert(BadgeRecord badge){
		 super.doInsert(badge);
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public void save(BadgeRecord badge){
		if (super.doExists(badge)) {
			super.doUpdate(badge);
		} else {
			insert(badge);
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(BadgeRecord badge){
		long result= super.doUpdate(badge);	
		return result > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
public 	BadgeRecord   create(BadgeRecord badge){
		insert(badge);
        return badge;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById(Integer badgeNumber) {
		BadgeRecord badge = newInstanceWithPrimaryKey(badgeNumber);
		long r = super.doDelete(badge);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(BadgeRecord badge) {
		long r = super.doDelete(badge);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 * @return
	 */
	public boolean exists(Integer badgeNumber) {
		BadgeRecord badge = newInstanceWithPrimaryKey(badgeNumber);
		return super.doExists(badge);
	}

	/**
	 * Checks the existence of the given bean in the database
	 * @return
	 */
	public boolean exists(BadgeRecord badge) {
		return super.doExists(badge);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected BadgeRecord docTobean(Document doc) {
		BadgeRecord badge = new BadgeRecord ();
		DocumentWrapper mongoDoc = new DocumentWrapper(doc);
		//--- Set data from document to Bean attributes
		badge.setBadgeNumber(mongoDoc.getInteger("badgeNumber"));
		badge.setAuthorizationLevel(mongoDoc.getShort("authorizationLevel"));
		badge.setEndOfValidity(mongoDoc.getDate("endOfValidity"));
		return badge ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected DocumentWrapper beanToDoc(BadgeRecord  bean) {
		//--- Set data from bean to Document attributes
		DocumentWrapper doc = new DocumentWrapper();	
		doc.append("badgeNumber", bean.getBadgeNumber());
		doc.append("authorizationLevel", bean.getAuthorizationLevel());
		doc.append("endOfValidity", bean.getEndOfValidity());
		return doc; 
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected void setAutoIncrementedKey(BadgeRecord  bean, long id) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected Bson bsonForIdentifyBean(BadgeRecord  bean) {
		DocumentWrapper mongoDoc = new DocumentWrapper();
		mongoDoc.append("badgeNumber", bean.getBadgeNumber());
		return	mongoDoc.getDocument();
	}

}
