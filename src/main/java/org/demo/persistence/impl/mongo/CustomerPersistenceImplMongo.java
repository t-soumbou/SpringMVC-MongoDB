/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.mongo;

import java.util.List;
import javax.inject.Named;
import org.bson.conversions.Bson;
import org.demo.persistence.impl.mongo.commons.GenericMongoDAO;
import org.bson.Document;
import org.demo.persistence.impl.mongo.commons.DocumentWrapper;



import org.demo.data.record.CustomerRecord;
import org.demo.persistence.CustomerPersistence;

@Named("CustomerPersistence")
public class CustomerPersistenceImplMongo extends GenericMongoDAO<CustomerRecord> implements CustomerPersistence {

	/**
	 * DAO constructor
	 */
	public CustomerPersistenceImplMongo() {
		super("customer");
	}

	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private CustomerRecord newInstanceWithPrimaryKey(String code) {
		CustomerRecord customer = new CustomerRecord ();
        customer.setCode(code); 
		return customer;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public CustomerRecord findById(String code){
        CustomerRecord  customer = newInstanceWithPrimaryKey(code);
		return super.doSelect(customer);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<CustomerRecord> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public CustomerRecord load(CustomerRecord customer) {
		 return super.doSelect(customer);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public   void   insert(CustomerRecord customer){
		 super.doInsert(customer);
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public void save(CustomerRecord customer){
		if (super.doExists(customer)) {
			super.doUpdate(customer);
		} else {
			insert(customer);
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(CustomerRecord customer){
		long result= super.doUpdate(customer);	
		return result > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
public 	CustomerRecord   create(CustomerRecord customer){
		insert(customer);
        return customer;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById(String code) {
		CustomerRecord customer = newInstanceWithPrimaryKey(code);
		long r = super.doDelete(customer);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(CustomerRecord customer) {
		long r = super.doDelete(customer);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 * @return
	 */
	public boolean exists(String code) {
		CustomerRecord customer = newInstanceWithPrimaryKey(code);
		return super.doExists(customer);
	}

	/**
	 * Checks the existence of the given bean in the database
	 * @return
	 */
	public boolean exists(CustomerRecord customer) {
		return super.doExists(customer);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected CustomerRecord docTobean(Document doc) {
		CustomerRecord customer = new CustomerRecord ();
		DocumentWrapper mongoDoc = new DocumentWrapper(doc);
		//--- Set data from document to Bean attributes
		customer.setCode(mongoDoc.getString("code"));
		customer.setCountryCode(mongoDoc.getString("countryCode"));
		customer.setFirstName(mongoDoc.getString("firstName"));
		customer.setLastName(mongoDoc.getString("lastName"));
		customer.setLogin(mongoDoc.getString("login"));
		customer.setPassword(mongoDoc.getString("password"));
		customer.setAge(mongoDoc.getInteger("age"));
		customer.setCity(mongoDoc.getString("city"));
		customer.setZipCode(mongoDoc.getInteger("zipCode"));
		customer.setPhone(mongoDoc.getString("phone"));
		customer.setReviewer(mongoDoc.getShort("reviewer"));
		return customer ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected DocumentWrapper beanToDoc(CustomerRecord  bean) {
		//--- Set data from bean to Document attributes
		DocumentWrapper doc = new DocumentWrapper();	
		doc.append("code", bean.getCode());
		doc.append("countryCode", bean.getCountryCode());
		doc.append("firstName", bean.getFirstName());
		doc.append("lastName", bean.getLastName());
		doc.append("login", bean.getLogin());
		doc.append("password", bean.getPassword());
		doc.append("age", bean.getAge());
		doc.append("city", bean.getCity());
		doc.append("zipCode", bean.getZipCode());
		doc.append("phone", bean.getPhone());
		doc.append("reviewer", bean.getReviewer());
		return doc; 
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected void setAutoIncrementedKey(CustomerRecord  bean, long id) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected Bson bsonForIdentifyBean(CustomerRecord  bean) {
		DocumentWrapper mongoDoc = new DocumentWrapper();
		mongoDoc.append("code", bean.getCode());
		return	mongoDoc.getDocument();
	}

}
