/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.mongo.commons;

import static com.mongodb.client.model.Filters.eq;

import org.bson.Document;
import org.bson.conversions.Bson;

import com.mongodb.client.MongoCollection;

public class MongoSequence {
	private static final String INCR = "$inc";
	private final Bson filter;
	protected MongoCollection<Document> compteursCollection;
	protected final String sequenceName;
	protected final String sequenceKey;
	private static final String COMPTEUR = "compteur";

	/**
	 * Constructor
	 * 
	 * @param entityName
	 */
	public MongoSequence(String name) {
		super();
		this.sequenceName = name;
		this.sequenceKey = "SEQUENCE_" + name;
		this.compteursCollection = ClientProvider.getDataBase().getCollection(COMPTEUR);
		Document doc = new Document("sequenceField", sequenceName).append(sequenceKey, 0L);
		this.compteursCollection.insertOne(doc);
		filter = eq("sequenceField", sequenceName);
	}

	/**
	 * Returns the sequence name
	 * 
	 * @return
	 */
	public final String getSequenceName() {
		return sequenceName;
	}

	/**
	 * Returns the Mongo key for this sequence
	 * 
	 * @return
	 */
	public final String getSequenceKey() {
		return sequenceKey;
	}

	/**
	 * Returns the current value <br>
	 * Returns 0 if the sequence doesn't exist
	 * 
	 * @return
	 */
	public final long currVal() {
		Document mySequence = compteursCollection.find(filter).first();
		if (mySequence != null) {
			return mySequence.getLong(sequenceKey);
		}

		return 0L;
	}

	/**
	 * Returns the next value (the sequence value is incremented)
	 * 
	 * @return
	 */
	public final long nextVal() {
		Document mySequence = compteursCollection.find(filter).first();
		compteursCollection.updateOne(mySequence, new Document(INCR, new Document(sequenceKey, 1L)));
		mySequence = compteursCollection.find(filter).first();

		return mySequence.getLong(sequenceKey);
	}

	/**
	 * Delete this sequence in Mongo
	 * 
	 * @return
	 */
	public final boolean delete() {
		Document mySequence = compteursCollection.find(filter).first();
		long ifDelete = compteursCollection.deleteOne(mySequence).getDeletedCount();

		return ifDelete == 1;
	}
}
