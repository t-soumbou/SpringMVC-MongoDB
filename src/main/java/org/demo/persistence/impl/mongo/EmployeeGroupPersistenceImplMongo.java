/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.mongo;

import java.util.List;
import javax.inject.Named;
import org.bson.conversions.Bson;
import org.demo.persistence.impl.mongo.commons.GenericMongoDAO;
import org.bson.Document;
import org.demo.persistence.impl.mongo.commons.DocumentWrapper;



import org.demo.data.record.EmployeeGroupRecord;
import org.demo.persistence.EmployeeGroupPersistence;

@Named("EmployeeGroupPersistence")
public class EmployeeGroupPersistenceImplMongo extends GenericMongoDAO<EmployeeGroupRecord> implements EmployeeGroupPersistence {

	/**
	 * DAO constructor
	 */
	public EmployeeGroupPersistenceImplMongo() {
		super("employeeGroup");
	}

	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private EmployeeGroupRecord newInstanceWithPrimaryKey(String employeeCode, Short groupId) {
		EmployeeGroupRecord employeeGroup = new EmployeeGroupRecord ();
        employeeGroup.setEmployeeCode(employeeCode); 
        employeeGroup.setGroupId(groupId); 
		return employeeGroup;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public EmployeeGroupRecord findById(String employeeCode, Short groupId){
        EmployeeGroupRecord  employeeGroup = newInstanceWithPrimaryKey(employeeCode, groupId);
		return super.doSelect(employeeGroup);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<EmployeeGroupRecord> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public EmployeeGroupRecord load(EmployeeGroupRecord employeeGroup) {
		 return super.doSelect(employeeGroup);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public   void   insert(EmployeeGroupRecord employeeGroup){
		 super.doInsert(employeeGroup);
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public void save(EmployeeGroupRecord employeeGroup){
		if (super.doExists(employeeGroup)) {
			super.doUpdate(employeeGroup);
		} else {
			insert(employeeGroup);
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(EmployeeGroupRecord employeeGroup){
		long result= super.doUpdate(employeeGroup);	
		return result > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
public 	EmployeeGroupRecord   create(EmployeeGroupRecord employeeGroup){
		insert(employeeGroup);
        return employeeGroup;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById(String employeeCode, Short groupId) {
		EmployeeGroupRecord employeeGroup = newInstanceWithPrimaryKey(employeeCode, groupId);
		long r = super.doDelete(employeeGroup);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(EmployeeGroupRecord employeeGroup) {
		long r = super.doDelete(employeeGroup);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 * @return
	 */
	public boolean exists(String employeeCode, Short groupId) {
		EmployeeGroupRecord employeeGroup = newInstanceWithPrimaryKey(employeeCode, groupId);
		return super.doExists(employeeGroup);
	}

	/**
	 * Checks the existence of the given bean in the database
	 * @return
	 */
	public boolean exists(EmployeeGroupRecord employeeGroup) {
		return super.doExists(employeeGroup);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected EmployeeGroupRecord docTobean(Document doc) {
		EmployeeGroupRecord employeeGroup = new EmployeeGroupRecord ();
		DocumentWrapper mongoDoc = new DocumentWrapper(doc);
		//--- Set data from document to Bean attributes
		employeeGroup.setEmployeeCode(mongoDoc.getString("employeeCode"));
		employeeGroup.setGroupId(mongoDoc.getShort("groupId"));
		return employeeGroup ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected DocumentWrapper beanToDoc(EmployeeGroupRecord  bean) {
		//--- Set data from bean to Document attributes
		DocumentWrapper doc = new DocumentWrapper();	
		doc.append("employeeCode", bean.getEmployeeCode());
		doc.append("groupId", bean.getGroupId());
		return doc; 
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected void setAutoIncrementedKey(EmployeeGroupRecord  bean, long id) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected Bson bsonForIdentifyBean(EmployeeGroupRecord  bean) {
		DocumentWrapper mongoDoc = new DocumentWrapper();
		mongoDoc.append("employeeCode", bean.getEmployeeCode());
		mongoDoc.append("groupId", bean.getGroupId());
		return	mongoDoc.getDocument();
	}

}
