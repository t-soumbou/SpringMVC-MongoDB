/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.mongo;

import java.util.List;
import javax.inject.Named;
import org.bson.conversions.Bson;
import org.demo.persistence.impl.mongo.commons.GenericMongoDAO;
import org.bson.Document;
import org.demo.persistence.impl.mongo.commons.DocumentWrapper;



import org.demo.data.record.PublisherRecord;
import org.demo.persistence.PublisherPersistence;

@Named("PublisherPersistence")
public class PublisherPersistenceImplMongo extends GenericMongoDAO<PublisherRecord> implements PublisherPersistence {

	/**
	 * DAO constructor
	 */
	public PublisherPersistenceImplMongo() {
		super("publisher");
	}

	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private PublisherRecord newInstanceWithPrimaryKey(Integer code) {
		PublisherRecord publisher = new PublisherRecord ();
        publisher.setCode(code); 
		return publisher;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public PublisherRecord findById(Integer code){
        PublisherRecord  publisher = newInstanceWithPrimaryKey(code);
		return super.doSelect(publisher);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<PublisherRecord> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public PublisherRecord load(PublisherRecord publisher) {
		 return super.doSelect(publisher);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public   void   insert(PublisherRecord publisher){
		 super.doInsert(publisher);
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public void save(PublisherRecord publisher){
		if (super.doExists(publisher)) {
			super.doUpdate(publisher);
		} else {
			insert(publisher);
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(PublisherRecord publisher){
		long result= super.doUpdate(publisher);	
		return result > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
public 	PublisherRecord   create(PublisherRecord publisher){
		insert(publisher);
        return publisher;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById(Integer code) {
		PublisherRecord publisher = newInstanceWithPrimaryKey(code);
		long r = super.doDelete(publisher);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(PublisherRecord publisher) {
		long r = super.doDelete(publisher);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 * @return
	 */
	public boolean exists(Integer code) {
		PublisherRecord publisher = newInstanceWithPrimaryKey(code);
		return super.doExists(publisher);
	}

	/**
	 * Checks the existence of the given bean in the database
	 * @return
	 */
	public boolean exists(PublisherRecord publisher) {
		return super.doExists(publisher);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected PublisherRecord docTobean(Document doc) {
		PublisherRecord publisher = new PublisherRecord ();
		DocumentWrapper mongoDoc = new DocumentWrapper(doc);
		//--- Set data from document to Bean attributes
		publisher.setCode(mongoDoc.getInteger("code"));
		publisher.setCountryCode(mongoDoc.getString("countryCode"));
		publisher.setName(mongoDoc.getString("name"));
		publisher.setEmail(mongoDoc.getString("email"));
		publisher.setContact(mongoDoc.getString("contact"));
		publisher.setCity(mongoDoc.getString("city"));
		publisher.setZipCode(mongoDoc.getInteger("zipCode"));
		publisher.setPhone(mongoDoc.getString("phone"));
		return publisher ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected DocumentWrapper beanToDoc(PublisherRecord  bean) {
		//--- Set data from bean to Document attributes
		DocumentWrapper doc = new DocumentWrapper();	
		doc.append("code", bean.getCode());
		doc.append("countryCode", bean.getCountryCode());
		doc.append("name", bean.getName());
		doc.append("email", bean.getEmail());
		doc.append("contact", bean.getContact());
		doc.append("city", bean.getCity());
		doc.append("zipCode", bean.getZipCode());
		doc.append("phone", bean.getPhone());
		return doc; 
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected void setAutoIncrementedKey(PublisherRecord  bean, long id) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected Bson bsonForIdentifyBean(PublisherRecord  bean) {
		DocumentWrapper mongoDoc = new DocumentWrapper();
		mongoDoc.append("code", bean.getCode());
		return	mongoDoc.getDocument();
	}

}
