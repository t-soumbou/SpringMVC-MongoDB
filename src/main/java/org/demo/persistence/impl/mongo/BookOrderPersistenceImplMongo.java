/*
 * Created on 2017-03-22 ( Date ISO 2017-03-22 - Time 16:41:52 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */
package org.demo.persistence.impl.mongo;

import java.util.List;
import javax.inject.Named;
import org.bson.conversions.Bson;
import org.demo.persistence.impl.mongo.commons.GenericMongoDAO;
import org.bson.Document;
import org.demo.persistence.impl.mongo.commons.DocumentWrapper;



import org.demo.data.record.BookOrderRecord;
import org.demo.persistence.BookOrderPersistence;

@Named("BookOrderPersistence")
public class BookOrderPersistenceImplMongo extends GenericMongoDAO<BookOrderRecord> implements BookOrderPersistence {

	/**
	 * DAO constructor
	 */
	public BookOrderPersistenceImplMongo() {
		super("bookOrder");
	}

	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private BookOrderRecord newInstanceWithPrimaryKey(Integer id) {
		BookOrderRecord bookOrder = new BookOrderRecord ();
        bookOrder.setId(id); 
		return bookOrder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public BookOrderRecord findById(Integer id){
        BookOrderRecord  bookOrder = newInstanceWithPrimaryKey(id);
		return super.doSelect(bookOrder);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<BookOrderRecord> findAll() {
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public BookOrderRecord load(BookOrderRecord bookOrder) {
		 return super.doSelect(bookOrder);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public   void   insert(BookOrderRecord bookOrder){
		 super.doInsert(bookOrder);
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public void save(BookOrderRecord bookOrder){
		if (super.doExists(bookOrder)) {
			super.doUpdate(bookOrder);
		} else {
			insert(bookOrder);
		}
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(BookOrderRecord bookOrder){
		long result= super.doUpdate(bookOrder);	
		return result > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
public 	BookOrderRecord   create(BookOrderRecord bookOrder){
		insert(bookOrder);
        return bookOrder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById(Integer id) {
		BookOrderRecord bookOrder = newInstanceWithPrimaryKey(id);
		long r = super.doDelete(bookOrder);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(BookOrderRecord bookOrder) {
		long r = super.doDelete(bookOrder);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 * @return
	 */
	public boolean exists(Integer id) {
		BookOrderRecord bookOrder = newInstanceWithPrimaryKey(id);
		return super.doExists(bookOrder);
	}

	/**
	 * Checks the existence of the given bean in the database
	 * @return
	 */
	public boolean exists(BookOrderRecord bookOrder) {
		return super.doExists(bookOrder);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected BookOrderRecord docTobean(Document doc) {
		BookOrderRecord bookOrder = new BookOrderRecord ();
		DocumentWrapper mongoDoc = new DocumentWrapper(doc);
		//--- Set data from document to Bean attributes
		bookOrder.setId(mongoDoc.getInteger("id"));
		bookOrder.setShopCode(mongoDoc.getString("shopCode"));
		bookOrder.setCustomerCode(mongoDoc.getString("customerCode"));
		bookOrder.setEmployeeCode(mongoDoc.getString("employeeCode"));
		bookOrder.setDate(mongoDoc.getDate("date"));
		bookOrder.setState(mongoDoc.getInteger("state"));
		return bookOrder ;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected DocumentWrapper beanToDoc(BookOrderRecord  bean) {
		//--- Set data from bean to Document attributes
		DocumentWrapper doc = new DocumentWrapper();	
		doc.append("id", bean.getId());
		doc.append("shopCode", bean.getShopCode());
		doc.append("customerCode", bean.getCustomerCode());
		doc.append("employeeCode", bean.getEmployeeCode());
		doc.append("date", bean.getDate());
		doc.append("state", bean.getState());
		return doc; 
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected void setAutoIncrementedKey(BookOrderRecord  bean, long id) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see Abstract Class
	 */
	@Override
	protected Bson bsonForIdentifyBean(BookOrderRecord  bean) {
		DocumentWrapper mongoDoc = new DocumentWrapper();
		mongoDoc.append("id", bean.getId());
		return	mongoDoc.getDocument();
	}

}
